rem this program checks mouse lifter board operation
CLS 

row = 0 
col = 0
en = 0
w = 0
word = 0
dim offset(6,6)
dim enable(6,6)
for i = 0 to 5 loop
 for j = 0 to 5 loop
  enable (i,j) = 1
 repeat
repeat  

print " INS = ENABLE LIFTER "
print " DEL = DISABLE LIFTER "
print " UP ARROW = INCREMENT ROW"
print " DOWN ARROW = DECREMENT ROW"
print " RIGHT ARROW = INCREMENT COLUMN"
print " LEFT ARROW = DECREMENT COLUMN"
print " Hm    =  RESET LIFTERS"
print " PG UP = RAISE LIFTER "
print " PG DOWN = LOWER LIFTER "

rem set gpio 0 to 7 to output mode
pinMode (0, 1)
pinMode (1, 1)
pinMode (2, 1)
pinMode (3, 1)
pinMode (4, 1)
pinMode (5, 1)
pinMode (6, 1)
pinMode (7, 1)

rem set gpio 8 to 14 to output mode
pinMode (8, 1)
pinMode (9, 1)
pinMode (10, 1)
pinMode (11, 1)
pinMode (12, 1)
pinMode (13, 1)
pinMode (14, 1)

rem set gpio 21 to 27 to output mode
pinMode (21, 1)
pinMode (22, 1)
pinMode (23, 1)
pinMode (24, 1)
pinMode (25, 1)
pinMode (26, 1)
pinMode (27, 1)

rem  initialize
rem paint 36 squares grey
for col = 0 to 5 loop
 for row = 0 to 5 loop
  COLOUR = 1
  v = 1 + col
  h = 4 + row
  RECT (h*40, v*40, 40, 40, 1)
 repeat
repeat



lift = 0
col = 0
row = 0
rem set all outputs to zero
digitalWrite (0, 0)
digitalWrite (1, 0)
digitalWrite (2, 0)
digitalWrite (3, 0)
digitalWrite (4, 0)
digitalWrite (5, 0)
digitalWrite (6, 0)
digitalWrite (7, 0)

digitalWrite (8, 0)
digitalWrite (9, 0)
digitalWrite (10, 0)
digitalWrite (11, 0)
digitalWrite (12, 0)
digitalWrite (13, 0)
digitalWrite (14, 0)

digitalWrite (21, 0)
digitalWrite (22, 0)
digitalWrite (23, 0)
digitalWrite (24, 0)
digitalWrite (25, 0)
digitalWrite (26, 0)
digitalWrite (27, 0)
digitalWrite (28, 0)

rem call homeing process
rem proc reset

col = 0

rem main loop
loop

 rem get keystrokes
 w = inkey
 if w = 331 then row = row + 1
 if w = 330 then row = row - 1
 if row > 5 then row = 5
 if row < 0 then row = 0
 if w = 332 then col = col + 1
 if w = 333 then col = col - 1
 if col > 5 then col = 5
 if col < 0 then col = 0
 if w = 324 then lift = lift + 1
 if w = 325 then lift = lift - 1
 if w = 312 then proc sine 

 rem place a 'zero' into 'enable' array to enable that lifter  
 if w = 320 then enable(col,row) = 0
 if w = 127 then enable(col,row) = 1
  
 rem check if lifter reset is asked for
 if w = 322 then proc reset

 rem display command grid
 COLOUR = 2
 v = 1 + col
 h = 4 + row
 RECT (h*40, v*40, 40, 40, 1)
 update 
 
 rem paint white on enabled lifter
 for i = 0 to 5 loop
  for j = 0 to 5 loop
   COLOUR = 4 * (1 - (enable(i,j))) +1
   v = 1 + i
   h = 4 + j
   RECT (h*40, v*40, 40, 40, 1)
  repeat
 repeat
 update

 rem put 'col' into column latch select
 digitalWrite (8, (col & 1))
 digitalWrite (9, (col & 2))
 digitalWrite (10, (col & 4))

 rem bitwise reconstruction of 'word' from 'enable' array
 word = 0
 for i = 0 to 5 loop
  word = word + (enable(col,i)* 2^i)
 repeat

 rem output routine
 digitalWrite (0, (word & 1))
 digitalWrite (1, (word & 2))
 digitalWrite (2, (word & 4))
 digitalWrite (3, (word & 8))
 digitalWrite (4, (word & 16))
 digitalWrite (5, (word & 32))
 
 rem strobe latches gpio 22
 digitalWrite (22, 1)
 digitalWrite (22, 0)

 
 rem raise and lower lifter
 switch(lift)
  case 1
   for j = 1 to 100 loop
    digitalWrite (24, 1)
    digitalWrite (23, 1)
    for k = 1 to 500 loop
    repeat 
    digitalWrite (23, 0)
    for k = 1 to 500 loop
    repeat 
   repeat
   lift = 0
  endcase 
  case -1
   for j = 1 to 100 loop
    digitalWrite (24, 0)
    digitalWrite (23, 1)
    for k = 1 to 500 loop
    repeat
    digitalWrite (23, 0)
    for k = 1 to 500 loop
    repeat 
   repeat
   lift = 0
  endcase
  
 endswitch

repeat
end

rem sequence all lifters and pull them down
def proc reset

digitalWrite (24, 0)
for i = 0 to 5 loop
 col = i
 digitalWrite (8, (col & 1))
 digitalWrite (9, (col & 2))
 digitalWrite (10, (col & 4))
 digitalWrite (0, 0)
 digitalWrite (1, 0)
 digitalWrite (2, 0)
 digitalWrite (3, 0)
 digitalWrite (4, 0)
 digitalWrite (5, 0)
 rem strobe latches gpio 22
 digitalWrite (22, 1)
 digitalWrite (22, 0)
repeat
  
rem step lifters down 1000 steps
for k = 1 to 10000 loop
 digitalWrite (23, 0)
 for l = 1 to 600 loop
 repeat 
 digitalWrite (23, 1)
repeat 
 for i = 0 to 5 loop
 col = i
 digitalWrite (8, (col & 1))
 digitalWrite (9, (col & 2))
 digitalWrite (10, (col & 4))
 digitalWrite (0, 1)
 digitalWrite (1, 1)
 digitalWrite (2, 1)
 digitalWrite (3, 1)
 digitalWrite (4, 1)
 digitalWrite (5, 1)
 rem strobe latches gpio 22
 digitalWrite (22, 1)
 digitalWrite (22, 0)
repeat

offset(0,0)= 26
offset(0,1)= 25
offset(0,2)= 25
offset(0,3)= 22
offset(0,4)= 26
offset(0,5)= 24

offset(1,0)= 26
offset(1,1)= 29
offset(1,2)= 27
offset(1,3)= 25
offset(1,4)= 25
offset(1,5)= 26

offset(2,0)= 24
offset(2,1)= 25
offset(2,2)= 25
offset(2,3)= 30
offset(2,4)= 25
offset(2,5)= 26

offset(3,0)= 27
offset(3,1)= 26
offset(3,2)= 27
offset(3,3)= 24
offset(3,4)= 29
offset(3,5)= 28

offset(4,0)= 26
offset(4,1)= 26
offset(4,2)= 28
offset(4,3)= 27
offset(4,4)= 26
offset(4,5)= 29

offset(5,0)= 26
offset(5,1)= 27
offset(5,2)= 28
offset(5,3)= 27
offset(5,4)= 20
offset(5,5)= 19

digitalWrite (24, 0)
for i = 0 to 5 loop
 for j = 0 to 5 loop
  
  col = i
  digitalWrite (8, (col & 1))
  digitalWrite (9, (col & 2))
  digitalWrite (10, (col & 4))
  word = 63-2^j
  digitalWrite (0, (word & 1))
  digitalWrite (1, (word & 2))
  digitalWrite (2, (word & 4))
  digitalWrite (3, (word & 8))
  digitalWrite (4, (word & 16))
  digitalWrite (5, (word & 32))
  rem strobe latches gpio 22
  digitalWrite (22, 1)
  digitalWrite (22, 0)
  
  rem offset lifter up
  digitalWrite (24, 1)
  for k = 1 to (offset(i,j)*20) loop
   digitalWrite (23, 0)
   for l = 1 to 1000 loop
   repeat 
   digitalWrite (23, 1)
  repeat 

  digitalWrite (24, 0)
  digitalWrite (5, 1)
  digitalWrite (22, 1)
  digitalWrite (22, 0)

 repeat
repeat
rem clear array
for i = 0 to 5 loop
 for j = 0 to 5 loop
  enable (i,j) = 1
 repeat
repeat  
col = 0
endproc 

def proc sine

for i = 1 to 20 loop
 for j = 1 to 2000 loop
  digitalWrite (24, 1)
  digitalWrite (23, 1)
  delay = 100 + ((abs(j-1000)/32)^2)/2
  for k = 1 to delay loop
  repeat 
  digitalWrite (23, 0)
  for k = 1 to 100 loop
  repeat 
 for k = 1 to 100 loop
 repeat
 repeat
 for j = 1 to 2000 loop
  digitalWrite (24, 0)
  digitalWrite (23, 1)
  delay = 100 + ((abs(j-1000)/32)^2)/2
  for k = 1 to delay loop
  repeat
  digitalWrite (23, 0)
  for k = 1 to 100 loop
  repeat 
 repeat
 for k = 1 to 100 loop
 repeat
repeat

endproc 
